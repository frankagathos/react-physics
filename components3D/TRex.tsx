/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 tRex.glb --transform
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import usePersonControls from '../hooks/usePersonControls'
import { useFrame } from '@react-three/fiber'

export function TRexModel({ run, ...restProps }: any) {
  const { nodes, materials, animations } = useGLTF('../tRex-transformed.glb')
  const ref = useRef<any>(null)
  const { actions } = useAnimations(animations, ref)
  const movement = usePersonControls()

  // function fadeToAction(name: any, duration: any) {
  //   const previousAction = activeAction
  //   const activeAction = actions[name]

  //   if (previousAction !== activeAction) {
  //     previousAction.fadeOut(duration)
  //   }

  //   activeAction
  //     .reset()
  //     .setEffectiveTimeScale(1)
  //     .setEffectiveWeight(1)
  //     .fadeIn(duration)
  //     .play()
  // }

  useFrame(() => {
    if (ref.current && actions && actions.idle && actions.run) {
      if (movement.forward) {
        ref.current.position.x += 0.01
        actions.idle.fadeOut(1)
        actions.run.fadeIn(1)
      } else {
        actions.run.fadeOut(1)
        actions.idle.fadeIn(1)
      }
      // if (movement.backward) {
      //   actions.run.crossFadeTo(actions.idle, 50, true)
      //   ref.current.position.x -= 0.01
      // }
      // if (movement.right) {
      //   ref.current.rotation.y = Math.PI / 2
      // }
      // if (Object.values(movement).every((m) => m === false)) {
      //   console.log('ACTIONS', actions)
      //   // actions?.idle?.play()
      //   actions.run.crossFadeTo(actions.idle, 0.5, false)
      // }
    }
  })

  useEffect(() => {
    //Set init position and rotation
    if (ref.current) {
      ref.current.rotation.y = Math.PI / 2
      ref.current.position.y = 0.5
    }
  }, [])

  return (
    <group ref={ref} {...restProps} dispose={null}>
      <group>
        <group name="RootNode0" scale={0.01}>
          <group name="geo1">
            <skinnedMesh
              name="TRex2"
              //@ts-ignore
              geometry={nodes.TRex2.geometry}
              //@ts-ignore
              material={nodes.TRex2.material}
              //@ts-ignore
              skeleton={nodes.TRex2.skeleton}
            />
          </group>
          <group name="skeletal3">
            <primitive object={nodes.bn_Spine4} />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('../tRex-transformed.glb')
